/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * MintMismatch: 'Mint Mismatch'
 *
 * @category Errors
 * @category generated
 */
export class MintMismatchError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'MintMismatch'
  constructor() {
    super('Mint Mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new MintMismatchError())
createErrorFromNameLookup.set('MintMismatch', () => new MintMismatchError())

/**
 * MintMismatch1: 'escrow_side_2_token_account.mint != side_1_token_account.mint'
 *
 * @category Errors
 * @category generated
 */
export class MintMismatch1Error extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'MintMismatch1'
  constructor() {
    super('escrow_side_2_token_account.mint != side_1_token_account.mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintMismatch1Error)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new MintMismatch1Error())
createErrorFromNameLookup.set('MintMismatch1', () => new MintMismatch1Error())

/**
 * MintMismatch2: 'escrow_side_1_token_account.mint != side_2_token_account.mint'
 *
 * @category Errors
 * @category generated
 */
export class MintMismatch2Error extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'MintMismatch2'
  constructor() {
    super('escrow_side_1_token_account.mint != side_2_token_account.mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintMismatch2Error)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new MintMismatch2Error())
createErrorFromNameLookup.set('MintMismatch2', () => new MintMismatch2Error())

/**
 * NumericalOverflow: 'Numerical Overflow'
 *
 * @category Errors
 * @category generated
 */
export class NumericalOverflowError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'NumericalOverflow'
  constructor() {
    super('Numerical Overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericalOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new NumericalOverflowError())
createErrorFromNameLookup.set(
  'NumericalOverflow',
  () => new NumericalOverflowError()
)

/**
 * EscrowStatusNotSide2Fulfilled: 'Escrow Status Not Side2Fulfilled'
 *
 * @category Errors
 * @category generated
 */
export class EscrowStatusNotSide2FulfilledError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'EscrowStatusNotSide2Fulfilled'
  constructor() {
    super('Escrow Status Not Side2Fulfilled')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EscrowStatusNotSide2FulfilledError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1774,
  () => new EscrowStatusNotSide2FulfilledError()
)
createErrorFromNameLookup.set(
  'EscrowStatusNotSide2Fulfilled',
  () => new EscrowStatusNotSide2FulfilledError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
